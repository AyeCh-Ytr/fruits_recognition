# -*- coding: utf-8 -*-
"""demo_fruits_reco.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tICNt737sur7BWhsk14xbxWJyOx-ZEEV
"""

from google.colab import files
files.upload()

!pip install kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d marquis03/plants-classification

import zipfile
import os

# Unzip the dataset
zip_file_path = 'plants-classification.zip'
extract_to_directory = '/content/plants-classification'

os.makedirs(extract_to_directory, exist_ok=True)

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extract_to_directory)

print(f"Files extracted to: {extract_to_directory}")

!ls '/content/plants-classification'

import os
import shutil
from glob import glob
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define the paths
base_path = '/content/plants-classification'  # Modify this to your dataset path
train_path = os.path.join(base_path, 'train')
valid_path = os.path.join(base_path, 'val')
test_path = os.path.join(base_path, 'test')

# Define the classes you want to train on
selected_classes = ['banana', 'cucumber', 'eggplant', 'guava', 'mango', 'melon', 'orange', 'watermelon','papaya','pineapple','spinach','kale']

# Filter the directories for the selected classes
def filter_classes(data_path, selected_classes):
    for item in os.listdir(data_path):
        item_path = os.path.join(data_path, item)
        if os.path.isdir(item_path) and item not in selected_classes:
            shutil.rmtree(item_path)

filter_classes(train_path, selected_classes)
filter_classes(valid_path, selected_classes)
filter_classes(test_path, selected_classes)

# Verify the filtered directories
print(f"Training classes: {os.listdir(train_path)}")
print(f"Validation classes: {os.listdir(valid_path)}")
print(f"Testing classes: {os.listdir(test_path)}")

def count_images_per_class(data_path):
    class_counts = {}
    for fruit_class in os.listdir(data_path):
        class_folder = os.path.join(data_path, fruit_class)
        if os.path.isdir(class_folder):
            num_images = len([f for f in os.listdir(class_folder) if f.endswith('.jpg')])
            class_counts[fruit_class] = num_images
    return class_counts

# Count the images per class
train_class_counts = count_images_per_class(train_path)
valid_class_counts = count_images_per_class(valid_path)
print("Training set class counts:", train_class_counts)
print("Validation set class counts:", valid_class_counts)

# Load images
image_files = glob(train_path + '/*/*.jp*g')
valid_image_files = glob(valid_path + '/*/*.jp*g')

# Display a random image
plt.imshow(image.img_to_array(image.load_img(np.random.choice(image_files))).astype('uint8'))
plt.show()

# Display a random image
plt.imshow(image.img_to_array(image.load_img(np.random.choice(image_files))).astype('uint8'))
plt.show()

IMAGE_SIZE = [100, 100] # feel free to change depending on dataset

# training config:
epochs = 2
batch_size = 8

vgg = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

# Freeze existing layers
for layer in vgg.layers:
  layer.trainable = False

# Add custom layers on top of VGG16
x = Flatten()(vgg.output)
prediction = Dense(len(selected_classes), activation='softmax')(x)

# Create the model object
model = Model(inputs=vgg.input, outputs=prediction)

# Compile the model
model.compile(
  loss='categorical_crossentropy',
  optimizer='rmsprop',
  metrics=['accuracy']
)

model.summary()

# Data augmentation and preprocessing
gen = ImageDataGenerator(
  rotation_range=20,
  width_shift_range=0.1,
  height_shift_range=0.1,
  shear_range=0.1,
  zoom_range=0.2,
  horizontal_flip=True,
  vertical_flip=True,
  preprocessing_function=preprocess_input
)

# Create generators
train_generator = gen.flow_from_directory(
  train_path,
  target_size=IMAGE_SIZE,
  shuffle=True,
  batch_size=batch_size,
  class_mode='categorical'
)
valid_generator = gen.flow_from_directory(
  valid_path,
  target_size=IMAGE_SIZE,
  shuffle=True,
  batch_size=batch_size,
  class_mode='categorical'
)

# Train the model
r = model.fit(
    train_generator,
    validation_data=valid_generator,
    epochs=epochs,
    steps_per_epoch=train_generator.samples // batch_size,
    validation_steps=valid_generator.samples // batch_size
)

# Save the trained model
model.save('one_fruit_classification_model.h5')

# loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()

# accuracies
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()

from google.colab import drive
drive.mount('/content/drive')

def classify_fruit(image_path, model):
    # Display the image
    img = image.load_img(image_path, target_size=IMAGE_SIZE)
    plt.imshow(img)
    plt.axis('off')
    plt.show()

    # Preprocess the image
    img = image.img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = preprocess_input(img)

    # Predict the class
    preds = model.predict(img)
    class_idx = np.argmax(preds)

    # Map index to class name
    class_names = train_generator.class_indices
    class_names = {v: k for k, v in class_names.items()}  # Invert the dictionary
    predicted_class = class_names[class_idx]

    print(f"Predicted Class: {predicted_class}")

# Example usage
classify_fruit('/content/drive/MyDrive/Data/train/cucumber/Image_1.jpg', model)

classify_fruit('/content/drive/MyDrive/Data/train/guava/FreshGuava (60).jpg', model)

classify_fruit('/content/drive/MyDrive/Data/train/watermelon/0_100.jpg', model)

classify_fruit('/content/drive/MyDrive/Data/train/orange/0_100.jpg', model)

classify_fruit('/content/drive/MyDrive/freshify/Test/FreshBanana/FreshBanana (1).jpg', model)

classify_fruit('/content/drive/MyDrive/Data/train/pineapple/4_100.jpg', model)

classify_fruit('/content/drive/MyDrive/Data/bigstock-Eggplant-8008491.jpg', model)

classify_fruit('/content/drive/MyDrive/Data/Spinach.jpg', model)

classify_fruit('/content/drive/MyDrive/Data/360_F_827958378_NqiQFk7unGO4FaFcEMAZSDFV6Y49yNnu.jpg', model)

